"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cluster_1 = tslib_1.__importDefault(require("cluster"));
const debug_1 = tslib_1.__importDefault(require("debug"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const process_exists_1 = tslib_1.__importDefault(require("process-exists"));
const _1 = require("./");
const utils_1 = require("./utils");
const debug = debug_1.default('egg-ts-helper#register');
const cacheFile = path_1.default.resolve(__dirname, '../.cache');
const isTesting = process.env.NODE_ENV === 'test';
/* istanbul ignore else */
if (cluster_1.default.isMaster) {
    // make sure ets only run once
    let existPid;
    if (fs_1.default.existsSync(cacheFile)) {
        existPid = +fs_1.default.readFileSync(cacheFile).toString();
    }
    if (!existPid || isTesting) {
        register(!isTesting);
    }
    else {
        process_exists_1.default(existPid).then(exists => {
            if (!exists) {
                register(true);
            }
            else {
                debug('process %s was exits, ignore register', existPid);
            }
        });
    }
}
// start to register
function register(watch) {
    // clean local js file at first.
    // because egg-loader cannot load the same property name to egg.
    utils_1.cleanJs(process.cwd());
    // exec building
    _1.createTsHelperInstance({ watch }).build();
    // cache pid
    if (watch) {
        fs_1.default.writeFileSync(cacheFile, process.pid);
        const clean = () => fs_1.default.existsSync(cacheFile) && fs_1.default.unlinkSync(cacheFile);
        // delete cache file on exit.
        process.once('beforeExit', clean);
        process.once('uncaughtException', clean);
        process.once('SIGINT', clean);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVnaXN0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOERBQThCO0FBQzlCLDBEQUFzQjtBQUN0QixvREFBb0I7QUFDcEIsd0RBQXdCO0FBQ3hCLDRFQUEyQztBQUMzQyx5QkFBNEM7QUFDNUMsbUNBQWtDO0FBQ2xDLE1BQU0sS0FBSyxHQUFHLGVBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQzFDLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZELE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLE1BQU0sQ0FBQztBQUVsRCwwQkFBMEI7QUFDMUIsSUFBSSxpQkFBTyxDQUFDLFFBQVEsRUFBRTtJQUNwQiw4QkFBOEI7SUFDOUIsSUFBSSxRQUE0QixDQUFDO0lBQ2pDLElBQUksWUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUM1QixRQUFRLEdBQUcsQ0FBQyxZQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ25EO0lBRUQsSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDMUIsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDdEI7U0FBTTtRQUNMLHdCQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1gsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2hCO2lCQUFNO2dCQUNMLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUMxRDtRQUNILENBQUMsQ0FBQyxDQUFDO0tBQ0o7Q0FDRjtBQUVELG9CQUFvQjtBQUNwQixTQUFTLFFBQVEsQ0FBQyxLQUFjO0lBQzlCLGdDQUFnQztJQUNoQyxnRUFBZ0U7SUFDaEUsZUFBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRXZCLGdCQUFnQjtJQUNoQix5QkFBc0IsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFMUMsWUFBWTtJQUNaLElBQUksS0FBSyxFQUFFO1FBQ1QsWUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXpDLE1BQU0sS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUFDLFlBQUUsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksWUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV6RSw2QkFBNkI7UUFDN0IsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEMsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN6QyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUMvQjtBQUNILENBQUMifQ==