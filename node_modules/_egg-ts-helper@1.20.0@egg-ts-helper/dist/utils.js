"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const mkdirp_1 = tslib_1.__importDefault(require("mkdirp"));
const globby_1 = tslib_1.__importDefault(require("globby"));
const path_1 = tslib_1.__importDefault(require("path"));
const typescript_1 = tslib_1.__importDefault(require("typescript"));
// load ts/js files
function loadFiles(cwd, pattern) {
    const fileList = globby_1.default.sync([pattern || '**/*.(js|ts)', '!**/*.d.ts'], {
        cwd,
    });
    return fileList.filter(f => {
        // filter same name js/ts
        return !(f.endsWith('.js') &&
            fileList.includes(f.substring(0, f.length - 2) + 'ts'));
    });
}
exports.loadFiles = loadFiles;
// load modules to object
function loadModules(cwd, loadDefault) {
    const modules = {};
    fs_1.default
        .readdirSync(cwd)
        .filter(f => f.endsWith('.js'))
        .map(f => {
        const name = f.substring(0, f.lastIndexOf('.'));
        const obj = require(path_1.default.resolve(cwd, name));
        if (loadDefault && obj.default) {
            modules[name] = obj.default;
        }
        else {
            modules[name] = obj;
        }
    });
    return modules;
}
exports.loadModules = loadModules;
// convert string to function
function strToFn(fn) {
    if (typeof fn === 'string') {
        return (...args) => fn.replace(/{{\s*(\d+)\s*}}/g, (_, index) => args[index]);
    }
    else {
        return fn;
    }
}
exports.strToFn = strToFn;
// log
function log(msg, prefix = true) {
    console.info(`${prefix ? '[egg-ts-helper] ' : ''}${msg}`);
}
exports.log = log;
function getAbsoluteUrlByCwd(p, cwd) {
    return path_1.default.isAbsolute(p) ? p : path_1.default.resolve(cwd, p);
}
exports.getAbsoluteUrlByCwd = getAbsoluteUrlByCwd;
// get import context
function getImportStr(from, to, moduleName, importStar) {
    const extname = path_1.default.extname(to);
    let importPath = path_1.default.relative(from, to).replace(/\/|\\/g, '/');
    importPath = importPath.substring(0, importPath.length - extname.length);
    const isTS = extname === '.ts';
    const importStartStr = isTS && importStar ? '* as ' : '';
    const fromStr = isTS ? `from '${importPath}'` : `= require('${importPath}')`;
    return `import ${importStartStr}${moduleName} ${fromStr};`;
}
exports.getImportStr = getImportStr;
// write file, using fs.writeFileSync to block io that d.ts can create before egg app started.
function writeFileSync(fileUrl, content) {
    mkdirp_1.default.sync(path_1.default.dirname(fileUrl));
    fs_1.default.writeFileSync(fileUrl, content);
}
exports.writeFileSync = writeFileSync;
// clean same name js/ts
function cleanJs(cwd) {
    const fileList = [];
    globby_1.default
        .sync(['**/*.ts', '!**/*.d.ts', '!**/node_modules'], { cwd })
        .forEach(f => {
        const jf = removeSameNameJs(path_1.default.resolve(cwd, f));
        if (jf) {
            fileList.push(jf);
        }
    });
    if (fileList.length) {
        console.info('[egg-ts-helper] These file was deleted because the same name ts file was exist!\n');
        console.info('  ' + fileList.join('\n  ') + '\n');
    }
}
exports.cleanJs = cleanJs;
// get moduleName by file path
function getModuleObjByPath(f) {
    const props = f.substring(0, f.lastIndexOf('.')).split('/');
    // composing moduleName
    const moduleName = props.map(prop => camelProp(prop, 'upper')).join('');
    return {
        props,
        moduleName,
    };
}
exports.getModuleObjByPath = getModuleObjByPath;
// remove same name js
function removeSameNameJs(f) {
    if (!f.endsWith('.ts') || f.endsWith('.d.ts')) {
        return;
    }
    const jf = f.substring(0, f.length - 2) + 'js';
    if (fs_1.default.existsSync(jf)) {
        fs_1.default.unlinkSync(jf);
        return jf;
    }
}
exports.removeSameNameJs = removeSameNameJs;
// find export node from sourcefile.
function findExportNode(code) {
    const sourceFile = typescript_1.default.createSourceFile('file.ts', code, typescript_1.default.ScriptTarget.ES2017, true);
    const cache = new Map();
    const exportNodeList = [];
    let exportDefaultNode;
    eachSourceFile(sourceFile, node => {
        if (node.parent !== sourceFile) {
            return;
        }
        // each node in root scope
        if (modifierHas(node, typescript_1.default.SyntaxKind.ExportKeyword)) {
            if (modifierHas(node, typescript_1.default.SyntaxKind.DefaultKeyword)) {
                // export default
                exportDefaultNode = node;
            }
            else {
                // export variable
                if (typescript_1.default.isVariableStatement(node)) {
                    node.declarationList.declarations.forEach(declare => exportNodeList.push(declare));
                }
                else {
                    exportNodeList.push(node);
                }
            }
        }
        else if (typescript_1.default.isVariableStatement(node)) {
            // cache variable statement
            for (const declaration of node.declarationList.declarations) {
                if (typescript_1.default.isIdentifier(declaration.name) && declaration.initializer) {
                    cache.set(declaration.name.escapedText, declaration.initializer);
                }
            }
        }
        else if ((typescript_1.default.isFunctionDeclaration(node) || typescript_1.default.isClassDeclaration(node)) && node.name) {
            // cache function declaration and class declaration
            cache.set(node.name.escapedText, node);
        }
        else if (typescript_1.default.isExportAssignment(node)) {
            // export default {}
            exportDefaultNode = node.expression;
        }
        else if (typescript_1.default.isExpressionStatement(node) && typescript_1.default.isBinaryExpression(node.expression)) {
            if (typescript_1.default.isPropertyAccessExpression(node.expression.left)) {
                const obj = node.expression.left.expression;
                const prop = node.expression.left.name;
                if (typescript_1.default.isIdentifier(obj)) {
                    if (obj.escapedText === 'exports') {
                        // exports.xxx = {}
                        exportNodeList.push(node.expression);
                    }
                    else if (obj.escapedText === 'module' &&
                        typescript_1.default.isIdentifier(prop) &&
                        prop.escapedText === 'exports') {
                        // module.exports = {}
                        exportDefaultNode = node.expression.right;
                    }
                }
            }
            else if (typescript_1.default.isIdentifier(node.expression.left)) {
                // let exportData;
                // exportData = {};
                // export exportData
                cache.set(node.expression.left.escapedText, node.expression.right);
            }
        }
    });
    while (exportDefaultNode && typescript_1.default.isIdentifier(exportDefaultNode) && cache.size) {
        const mid = cache.get(exportDefaultNode.escapedText);
        cache.delete(exportDefaultNode.escapedText);
        exportDefaultNode = mid;
    }
    return {
        exportDefaultNode,
        exportNodeList,
    };
}
exports.findExportNode = findExportNode;
// check kind in node.modifiers.
function modifierHas(node, kind) {
    return node.modifiers && node.modifiers.find(mod => kind === mod.kind);
}
exports.modifierHas = modifierHas;
// each ast node
function eachSourceFile(node, cb) {
    if (!typescript_1.default.isSourceFile(node)) {
        const result = cb(node);
        if (result === false) {
            return;
        }
    }
    node.forEachChild((sub) => {
        eachSourceFile(sub, cb);
    });
}
exports.eachSourceFile = eachSourceFile;
// resolve module
function resolveModule(url) {
    try {
        return require.resolve(url);
    }
    catch (e) {
        return undefined;
    }
}
exports.resolveModule = resolveModule;
// check whether module is exist
function moduleExist(mod, cwd) {
    const nodeModulePath = path_1.default.resolve(cwd || process.cwd(), 'node_modules', mod);
    return fs_1.default.existsSync(nodeModulePath) || resolveModule(mod);
}
exports.moduleExist = moduleExist;
// require modules
function requireFile(url) {
    url = url && resolveModule(url);
    if (!url) {
        return undefined;
    }
    let exp = require(url);
    if (exp.__esModule && 'default' in exp) {
        exp = exp.default;
    }
    return exp;
}
exports.requireFile = requireFile;
// require package.json
function getPkgInfo(cwd) {
    return requireFile(path_1.default.resolve(cwd, './package.json')) || {};
}
exports.getPkgInfo = getPkgInfo;
// format property
function formatProp(prop) {
    return prop.replace(/[._-][a-z]/gi, s => s.substring(1).toUpperCase());
}
exports.formatProp = formatProp;
// like egg-core/file-loader
function camelProp(property, caseStyle) {
    if (typeof caseStyle === 'function') {
        return caseStyle(property);
    }
    // camel transfer
    property = formatProp(property);
    let first = property[0];
    // istanbul ignore next
    switch (caseStyle) {
        case 'lower':
            first = first.toLowerCase();
            break;
        case 'upper':
            first = first.toUpperCase();
            break;
        case 'camel':
            break;
        default:
            break;
    }
    return first + property.substring(1);
}
exports.camelProp = camelProp;
//# sourceMappingURL=data:application/json;base64,